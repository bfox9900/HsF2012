\  E.22 The optional Search-Order word set

\ E.16.6.1.1550
\ FIND
\ Assuming #order and context are defined as per E.16.6.1.1647 GET-ORDER.

: FIND ( c-addr -- c-addr 0 | xt 1 | xt -1 )
   0                              ( c-addr 0 )
   #order @ 0 ?DO
      OVER COUNT	                 ( c-addr 0 c-addr' u )
      I CELLS context + @	        ( c-addr 0 c-addr' u wid )
      SEARCH-WORDLIST	            ( c-addr 0; 0 | w 1 | q -1 )
      ?DUP IF	                    ( c-addr 0; w 1 | w -1 )
             2SWAP 2DROP LEAVE	   ( w 1 | w -1 )
         THEN	                    ( c-addr 0 )
      LOOP	                       ( c-addr 0 | w 1 | w -1 )
   ;

\ E.16.6.1.1647
\ GET-ORDER
\ Here is a very simple search order implementation:

VARIABLE #order

CREATE context 16 ( wordlists ) CELLS ALLOT

: GET-ORDER ( -- wid1 ... widn n )
   #order @ 0 ?DO
     #order @ I - 1- CELLS context + @
   LOOP
   #order @
;

\ E.16.6.1.2197
\ SET-ORDER
\ This is the complement of E.16.6.1.1647 GET-ORDER.

: SET-ORDER ( wid1 ... widn n -0 )
   DUP -1 = IF
     DROP <push system default word lists and n>
   THEN
   DUP #order !
   0 ?DO I CELLS context + ! LOOP
;

\ E.16.6.2.0715
\ ALSO

: ALSO ( -- )
   GET-ORDER OVER SWAP 1+ SET-ORDER
;

\ E.16.6.2.1590
\ FORTH
: (wordlist) ( wid "<name>" – ; )
   CREATE ,
   DOES>
     @ >R
     GET-ORDER NIP
     R> SWAP SET-ORDER
;

FORTH-WORDLIST (wordlist) FORTH

\ E.16.6.2.1965
\ ONLY

: ONLY ( -- ) -1 SET-ORDER ;

\ E.16.6.2.2037
\ PREVIOUS

: PREVIOUS ( -- ) GET-ORDER NIP 1- SET-ORDER ;

\ E.16.6.1.1180
\ DEFINITIONS
: discard ( x1 ... xn u -- ) \ Drop u+1 stack items
   0 ?DO DROP LOOP
;

: DEFINITIONS ( -- )
   GET-ORDER SWAP SET-CURRENT discard
;

\ reverse string using counted strings
\ Method: Read the input string character by character onto the parameter stack
\         Then write the character back into the same string from the stack

create mystring ," ABCDEFGHIJKLMNOPQRSTUVWXYZ987654321abcdefghijklmnopqrstuvwxyz987654321"

: pushstr ( str -- char[1].. char[n])    \ read the contents of STR onto the stack
            count bounds  do  I c@  loop ;

: popstr   ( char[1].. char[n] str -- )  \ read chars off stack into caddr
            count bounds  do  I c!  loop ;

: reverse ( str -- )         \ create the reverse function with the factored words
          dup >r             \ put a copy of the string addr on return stack
          pushstr            \ push the characters onto the parameter stack
          r> popstr ;        \ get back our copy of the string addr and pop the characters into it

\ test in the Forth console

\ mystring count type
\ mystring reverse
\ mystring count type

\ Rosetta Code method 1 (Anton Ertl I believe)

: exchange ( a1 a2 -- )
           2dup c@ swap c@ rot c! swap c! ;

: areverse ( c-addr u -- )
          1- bounds
          begin
               2dup >
          while
               2dup exchange
               -1 /string
          repeat
          2drop ;

\ s" testing" 2dup reverse type   \ gnitset

include fornext.hsf

: testfox  64000 for  mystring reverse next ;

: testertl 64000 for  mystring count areverse next ;
\ DOUBLE.HSF re-worked for HSF2000
( DOUBLE & QUAD  COPYRIGHT 1986 HARVARD SOFTWORKS, ALL RIGHTS RESERVED )


HEX
: D$L
        -rot tuck dabs <# #s rot sign #> ( w adr n -- adr w )
         >r  over r@ >
         if  dup r@ + rot 7f min tuck r> - blank
         else nip r>
         then ;

: D.L  D$L TYPE ;

: D$N
        >r tuck dabs
        <#
            r> 1
            do    #  loop
            over if #s then
            rot 0<
            if [char] -
            else [char] +
            then hold
         #> ;

: D.N  D$N TYPE ;

: $ENGR  ( adr cnt -- $adr )
        #->$ >r       [char] e r@ cmember?  ?dup
        if  r@ +   >r  the #e r@ c!
            r@ >number drop  [char] e r> c!
            dup 3 mod 3+ 3 mod tuck -
            r@ count + pad - endl +!
            s->d  the #e d$n 2drop oldl endl @&!

            ?dup
            if  [char] . r@ cmember?  r@ + dup@ cswap over !
                swap 1-
                if 1+ dup@ cswap swap !
                else drop
                then
            then
         then r> ;


CODE DNIP
    <% 58 59 59 50 %>
next.  end-code  ( d1 d2 - d2 )

CODE D-ROT
        <% 59 58 07 5A 5F 51 53 57 52 06 93 %>
next.  end-code
           \ NOTE: Both DROT and D-ROT must necessarily use ES for efficiency.

CODE D+!   <% 58 59 010F 114702 5B %>              next.  end-code

CODE D<=   <% 59 58 5A 29D1 19C3 BBFFFF 7D01 43 %> next.  end-code

CODE D>=   <% 59 58 5A 2BD1 1BC3 BBFFFF 7D01 43 %> next.  end-code

CODE D<>   <% 59 58 5A 29CA 19D8 09D0 BBFFFF 7501 43 %> next.  end-code

CODE D0<   <% 58 03DB BB0000 7301 4B %> next.  end-code

CODE QR@   <% 538B5E00     538B5EFE     538B5EFC     538B5EFA     %> next.  end-code

CODE D->Q     <% 53 93 99 52 89D3 %> next.  end-code  ( d - q )          ( du u - tu )

CODE MU*      <% 59 58 F7E3 50 91 89D1 F7E3 01C8 7301 42 50 89D3 %>    next.  end-code

CODE DU*      <% 53   89E7    29EF   8B4B04 8B5B06 89D8 F76302 895304 894306 %>
( d1 d2 - q3) <% 89C8 F76302  014304        81D20000 895302 8B03 %>
              <%   91 F7E1    014302        81D20000 8913        %>
              <%   93 F7E1 5B 014304 115302 81D30000 %>   next.  end-code



CODE  QDUP
        <% 58 59 5A 52 51 50 53  52 51 50 %>
        next.
end-code

: QSWAP    D>R D-ROT DR> D-ROT ;

: QOVER    Q>R QDUP QR> QSWAP  ;

CODE  QABS    <% 53 %>

+CODE Q+-     <% 09DB 5B 7921 %>

+CODE QNEGATE
            <% 53 29DB 29C9 29C0 99 89E7 29EF 2B4306 1B4B04 1B5302 %>
            <% 1B 1B 894306 894B04 895302 58 %>
            next.
END-CODE

CODE Q+
            <% 5A 59 58 89E7 29EF 014306 114B04 115302 111B 5B %>
            next.
END-CODE

CODE Q-       <% 5A 59 58 89E7 29EF 294306 194B04 195302 191B 5B %>     next.  end-code

CODE Q2*  <% 58 59 5A 01D2 52 11C9 51 11C0 50 11DB  %> next.  end-code

CODE DUSQRT   <% 58  89 DA  31 DB  31 FF  B9 10 00  09 D2  75 03  92  B1 08 %>
              <% D1 E3  43  D1 E0  D1 D2  D1 D7  D1 E0  D1 D2  D1 D7  29 DF %>
              <% 73 07  01 DF  4B  E2 E8  EB 03  43 E2 E3 %>
              <% D1 EB  2B FB  7E 01  43 %>
              next.
end-code

\
CODE MQU/MOD ( qnum  ddev -- drem qquot )
      <% 81 C5 12 00 29 C0 89 76  00 89 46 FE 89 46 FC 89 %>
      <% 46 FA 89 46 F8 89 C6 89  D9 5A 5F 89 7E F6 5E 89 %>
      <% 76 F4 8F 46 F2 8F 46 F0  09 C9 75 3A 09 D2 75 0E %>
      <% FF 76 F0 FF 76 F2 56 57  29 DB 53 E9 A9 00 87 D1 %>
      <% 8B 46 F6 F7 F1 89 C7 8B  46 F4 F7 F1 89 C6 8B 46 %>
      <% F2 F7 F1 89 C3 8B 46 F0  F7 F1 52 29 D2 52 50 53 %>
      <% 56 89 FB E9 81 00 29 DB  B8 01 00 96 21 C9 78 08 %>
      <% 01 F6 01 D2 11 C9 79 F8  21 FF 74 0A BF 04 00 29 %>
      <% C0 91 87 D3 EB 14 21 C0  74 0B BF 02 00 29 C0 87 %>
      <% CB 87 D1 EB 05 BF 00 00  29 C0 39 46 F6 77 15 72 %>
      <% 22 39 5E F4 77 0E 72 1B  39 4E F2 77 07 72 14 39 %>
      <% 56 F0 72 0F 09 73 F8 29  56 F0 19 4E F2 19 5E F4 %>
      <% 19 46 F6 D1 CE 73 04 4F  4F 78 0A D1 E8 D1 DB D1 %>
      <% D9 D1 DA EB C5 FF 76 F0  FF 76 F2 FF 76 F8 FF 76 %>
      <% FA FF 76 FC 8B 5E FE 8B  76 00 81 ED 12 00 %>
      next.
END-CODE

: MDU*/MOD      D>R  DU*  DR>  MQU/MOD ;        ( dum1 dum2 dudv -- durem quq )

: OVERFLOW      ABORT" Overflow" ;

: ?D+-          OVER  32K AND OVERFLOW D+- ;

: M/MOD  ( d n - n d )
        >R DUP>R DABS I' ABS MU/MOD
        DR@ XOR ?D+-  ROT R> RDROP  +- -ROT ;

: M/     ( d n -   d )  M/MOD ROT DROP ;

: QU/MOD        MQU/MOD   OR  OVERFLOW ;        ( qunum     dudv -- durem duq )

: QU/           QU/MOD    Dnip       ;        ( qunum     dudv --       duq )

: DU*/MOD       MDU*/MOD  OR  OVERFLOW ;        ( dum1 dum2 dudv -- durem duq )

: DU*/          DU*/MOD Dnip ;                ( dum1 dum2 dudv --       duq )

: MD*           DUP>R DABS  2swap DUP>R DABS  DU*               ( d1 d2 -- q3 )
                DR> XOR OVER  32K AND OVERFLOW Q+- ;

: D*            DUP>R DABS  2swap DUP>R DABS  DU* OR OVERFLOW   ( d1 d2 -- d3 )
                DR> XOR ?D+- ;
: Q/MOD                                         ( qnum      ddiv --  drem  dq )
                D>R DUP>R  QABS TR> ROT   >R DUP>R DABS  QU/MOD
                R> R@ XOR ?D+-      2swap R> ?D+- 2swap ;

: Q/            Q/MOD  Dnip ;

: D*/MOD        D>R MD* DR> Q/MOD ;             (  dm1  dm2 ddiv --  drem  dq )

: D*/           D*/MOD Dnip ;                 (  dm1  dm2 ddiv --        dq )

: Q*         DUP 4 PICK XOR >R  DABS D>R  QABS               ( q  d  --  q )
             DR@ DU* OR OVER 32K  AND OR OVERFLOW  2swap D>R D>R 0 0 DR> DR>
             DR> DU* Q+  DUP 32K  AND    OVERFLOW  R>    Q+- ;
DECIMAL

: DU10/         10 MU/ ;

: Q10*          Q2* QDUP Q2* Q2* Q+ ;

: U**   ( u i -- du )    DUP 0>
       IF 1- DUP  IF  OVER >R 0 tuck   DO  J MU* DROP LOOP RDROP THEN
     ELSE DUP 0<  IF  2drop  0 0 ELSE 2drop 1. THEN THEN ;

: **   ( s i -- d  )    DUP 0>
       IF 1- DUP  IF  SWAP S->D 2dup D>R ROT 0 DO J J' D* LOOP RDROP RDROP THEN
     ELSE DUP 0<  IF  2drop  0 0 ELSE 2drop 1. THEN THEN ;

: D**   ( d i -- q  )    DUP 0>
       IF 1- DUP  IF  >R 2dup D>R D->Q  J 0  DO J J' Q*  LOOP
                      RDROP RDROP RDROP THEN
     ELSE DUP 0<  IF  2drop  0 0 ELSE 2drop 1. THEN 0 0 THEN ;

\
CODE D@H ( h - d )  <% B90400 45 45 89EA 45 45    1E 8CD7 8EDF B43F %>
     <% 5655CD215D5E 1F        FF76FE 8B5E00 81C5FCFF %>
     next.
end-code


CODE D!H ( d h - ) <% B90400 45 45 89EA 45 45 8F4600 8F46FE %>
    <% 1E 8CD7 8EDF B440 5655CD215D5E 1F 81C5FCFF 5B %> next.  end-code


\ Double length local           ( vadr  v!  v@   |   i [j] [k] [l] data-table )
                                ( AX nn +[DI] MOV. BX MUL. BX POP. BX AX ADD. )
CODE 4DVADR <% 8B450A F7E3 5B 01C3 %>
+CODE 3DVADR <% 8B4508 F7E3 5B 01C3 %>
+CODE 2DVADR <% 8B4506 F7E3 5B 01C3 %>
+CODE 1DVADR <% 01DB 01DB    8D590E %>
             next.
END-CODE

CODE 4DV!   <% 8B4508 F7E3 5B 01C3 %>
+CODE 3DV!  <% 8B4506 F7E3 5B 01C3 %>
+CODE 2DV!  <% 8B4504 F7E3 5B 01C3 %>
+CODE 1DV!  <% 01DB 01DB 8F410E 8F410C 5B %>
            next.
END-CODE

CODE 4DV@   <% 8B4506 F7E3 5B 01C3 %>
+CODE 3DV@  <% 8B4504 F7E3 5B 01C3 %>
+CODE 2DV@  <% 8B4502 F7E3 5B 01C3 %>
+CODE 1DV@  <% 01DB 01DB FF710A 8B590C %>
            next.
END-CODE

1 4  ' MK-IVAR   CA' 1DVADR  CA' 1DV!  CA' 1DV@  VAR: 1DVAR
2 4  ' MK-IVAR   CA' 2DVADR  CA' 2DV!  CA' 2DV@  VAR: 2DVAR
3 4  ' MK-IVAR   CA' 3DVADR  CA' 3DV!  CA' 3DV@  VAR: 3DVAR
4 4  ' MK-IVAR   CA' 4DVADR  CA' 4DV!  CA' 4DV@  VAR: 4DVAR
\
             ( vadrL v!L v@L  ,,  offset para link abs  i [j] [[k]] [[[l]]] )
             ( AX nn +[DI] MOV. BX MUL. AX POP. BX AX ADD. )

\
CODE 4DVADRL <% 8B4512 F7E3 5B 01C3 %>
+CODE 3DVADRL <% 8B4510 F7E3 5B 01C3 %>
+CODE 2DVADRL <% 8B450E F7E3 5B 01C3 %>
+CODE 1DVADRL <% C47D06 8CC0 2BC9 86EF D1E9 D1E9 01C8 50 03DB 03DB 03DF %>
next.  end-code    \ DI,4[DI]les AX<ES CX-CX CHxcBH CX,1r CX,1r AX+CX AXpush
                   \ BX+BX BX+BX  BX+DI

CODE 4DV!L   <% 8B4510 F7E3 5B 01C3 %>
+CODE 3DV!L   <% 8B450E F7E3 5B 01C3 %>
+CODE 2DV!L   <% 8B450C F7E3 5B 01C3 %>
+CODE 1DV!L   <% C47D04 8CC0 2BC9 86EF D1E9 D1E9 01C8 8EC0 03DB 03DB %>
              <% 26 8F4102 26 8F01 5B %> next.  end-code
\ DI,4[DI]les AX<ES CX-CX CHxcBH CX,1r CX,1r AX+CX ES<AX BX+BX BX+BX
              \  ES:2[BX+DI]pop ES:[BX+DI]pop  BX pop

CODE 4DV@L   <% 8B450E F7E3 5B 01C3 %>
+CODE 3DV@L   <% 8B450C F7E3 5B 01C3 %>
+CODE 2DV@L   <% 8B450A F7E3 5B 01C3 %>
+CODE 1DV@L   <% C47D02 8CC0 2BC9 86EF D1E9 D1E9 01C8 8EC0 03DB 03DB %>
              <% 26 FF31 26 8B5902 %>
next.  end-code

\ DI,4[DI]les AX<ES CX-CX CHxcBH CX,1r CX,1r AX+CX ES<AX BX+BX BX+BX
\  ES:[BX+DI]push  BX ES:2[BX+DI]mov

1 4  ' MK-IVARF  CA' 1DVADRL CA' 1DV!L CA' 1DV@L VAR:  1DVAR-FAR
2 4  ' MK-IVARF  CA' 2DVADRL CA' 2DV!L CA' 2DV@L VAR:  2DVAR-FAR
3 4  ' MK-IVARF  CA' 3DVADRL CA' 3DV!L CA' 3DV@L VAR:  3DVAR-FAR
4 4  ' MK-IVARF  CA' 4DVADRL CA' 4DV!L CA' 4DV@L VAR:  4DVAR-FAR

CODE DV!L
        <% C47D04 268F05 26895D02 5B %>
next.  end-code   \           DI 4+[DI]les ES:[DI]pop  ES:2+[DI]<-BX BXpop

CODE DV@L
        <% 53 C47D02 26FF35 268B5D02 %>

next.  end-code \ BXpush DI 2+[DI]les ES:[DI]push ES:BX<-2+[DI]

0 4  ' MK-VARF  CA' VADRL CA' DV!L CA' DV@L  VAR: DVAR-FAR

CODE ID@E
        <% 58 01C3 %> +CODE D@E <% 26FF37 268B5F02 %>
        next.
END-CODE

ONLY FORTH DEFINITIONS

BEHEAD'' 4DVADR 1DV@
BEHEAD'' 4DVADRL 1DV@L
BEHEAD'' DV!L DV@L
BEHEAD'  ?D+-

DECIMAL


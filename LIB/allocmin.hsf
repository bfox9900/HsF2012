\ Minimal ALLOCATE FREE RESIZE                      BJF Oct 16 2015

\ simplest memory allocation word set for HSF2012
\ HEAP is what ever is left in the LISTS segment, so small projects only SVP
\ This code only provides basic ANS compatibilty for this DOS system
\ For a bigger HEAP in a FAR segment use FALLOCAT.HSF

\ I have taken the dead simple approach to make the heap work like
\ Forth dictioary space, but starting from the other end.

\ If you try to FREE an item that is not the last node it will blow
\ away the ones before allocated after as well! Just like FORGET

\ If you RESIZE an item that is not the last NODE you get an ERROR
\ ========================================================================


\ preamble

HEX
\ ========================================================================
\ *** SET THIS CONSTANT FOR YOUR SYSTEM ***

     0FF90 constant memtop

\ ========================================================================

\ ERROR constants
        69 constant allocate_err
        79 constant heap_overflow
        89 constant free_error
        99 constant resize_error

       200 VALUE HGAP                                \ 512 byte safety gap between dictionary and allocated memory


VARIABLE AP                                           \ allocation pointer
VARIABLE LASTNODE                                     \ keeps track of the last node created

: HEAP        ( -- addr ) AP @ ;                      \ return the address of next available heap space (end of heap)
: HALLOT      ( n -- )  
              HEAP LASTNODE !                         \ record the last ALLOCATED memory address
              NEGATE AP +! ;                          \ "heap allot". Like Forth ALLOT, but grows downwards

: heap,       ( n -- )  HEAP ! CELL HALLOT ;          \ "heap comma" put n in next available heap memory
: ?eom        ( u -- ? ) HERE HGAP +  > ;

: INIT-HEAP   ( --)  MEMTOP dup AP ! LASTNODE !;


\ 14.6.1.0707 ALLOCATE ( u -- a-addr ior )
\
\ Allocate u address units of contiguous data space. The data-space pointer is
\ unaffected by this operation. The initial content of the allocated space is
\ undefined. If the allocation succeeds, a-addr is the aligned starting address
\ of the allocated space and ior is zero. If the operation fails, a-addr does
\ not represent a valid address and ior is the implementation-defined I/O result
\ code.

\ NOTE: a-addr is the actual address of memory you use to put things in.
\       To get the link to the previous item use  "a-ddr >PREV"

: ALLOCATE    ( u -- a-addr ior )
              heap over - ( u newheap)                   \ calc new address HEAP+u
              ?eom
              if
                  ALLOCATE_ERR
              ELSE
              ( u ) dup hallot                           \ allot the space in the heap with memory check
                   LASTNODE @ 
                   false                                 \ return the HEAP pointer and 0 flag
              THEN ;

\ 14.6.1.1605 FREE ( a-addr -- ior )
\
\ Return the contiguous region of data space indicated by a-addr to the system
\ for later allocation.
\ a-addr shall indicate a region of data space that was previously obtained by
\ ALLOCATE or RESIZE.
\ The data-space pointer is unaffected by this operation.
\ If the operation succeeds, ior is zero. If the operation fails, ior is the
\ implementation-defined I/O result code.

\ In this implementation FREEing other than the last NODE allocated removes
\ all items before it as well. Simple but crude.

: FREE      ( addr -- ior)                                \ unconditional removal.  that's it.
            DUP LASTNODE @ =
            IF  PREVNODE @                                   \ go back 1 more node
                dup AP !                                  \ move the allocation pointer
                LASTNODE !                                \ make it the last node
                false                                     \ return 0 ie: success
            ELSE
                FREE_ERROR                                \ the address is not a valid NODE in the heap.  return error
            THEN ;


\ 14.6.1.2145 RESIZE ( a-addr1 u -- a-addr2 ior )
\
\ Change the allocation of the contiguous data space starting at the address
\ a-addr1, previously allocated by ALLOCATE or RESIZE, to u address units.
\ u may be either larger or smaller than the current size of the region.
\ The data-space pointer is unaffected by this operation. If the operation
\ succeeds, a-addr2 is the aligned starting address of u address units of allocated memory and ior
\ is zero. a-addr2 may be, but need not be, the same as a-addr1. If they are
\ not the same, the values contained in the region at a-addr1 are copied to
\ a-addr2, up to the minimum size of either of the two regions. If they are
\ the same, the values contained in the region are preserved to the minimum
\ of u or the original size. If a-addr2 is not the same as a-addr1, the region
\ of memory at a-addr1 is returned to the system according to the operation
\ of FREE.
\ If the operation fails, a-addr2 equals a-addr1, the region of memory at a-
\ addr1 is unaffected, and ior is the implementation-defined I/O result code.


: RESIZE ( addr u -- addr' ior)
          cell max                                    \ clip the min size to 1 cell and no negative numbers
          over LASTNODE @ =                           \ NON ANS: you can only re-size the last node.
          OVER FINDNODE  or                           \ also test if it's a good node address
          if  2dup -  ?eom
             if  DROP resize_error
             else
                  2dup swap ALLOCATION !              \ prevent negative resizing and limit to 1 cell minimum size
                  over + AP !
                  false
             then
          else
                resize_error                          \ attemp to resize previous node
          then ;

: HEAP-SIZE ( -- u )   HEAP here hgap +  - ;         \ returns memory available in the heap

\ where have I seen these before?  Allocate memory, but abort if it fails.
: malloc   ( bytes -- addr )
           allocate  abort" Malloc failed" ;

: calloc   ( #elements size -- addr )
           * allocate abort" Calloc failed"
            dup dup ALLOCATED erase ;

INIT-HEAP

-1 [if]
\ HEAP tools for debugging
: .Heap    cr ." Heap free= " HEAP-SIZE u.  ;

\ count nodes backwards
:  #NODES  ( -- n)
           0 >R
           LASTNODE @
           BEGIN
              >PREV @ DUP
           WHILE
              R> 1+ >R
           REPEAT
           R> ;

\ show the addresses and sizes

: .node   ( node -- )  dup 6 u.r  TAB  dup ALLOCATED 5 .r  TAB  >prev @ 6 u.r ;

: .nodes
           cr ."  Node    Bytes   Link"
           cr
           lastnode @
           begin
               cr dup .node
               >prev @
           dup 0= until
           2drop
           CR ." Total nodes = " #nodes .  TAB  .Heap ;
[then]
\ =========================================================================


0 [if]

\ INTERESTING!  smart string store.  Aborts if node is not allocated
: $$!      ( c-addr addr -- ) ?node  $! ;

\ Alternative form of buffer:

: heap-buffer:    ALLOCATE THROW CONSTANT ;


\ TEST CODE
\ test malloc and create some named pointers to hold our allocated memory,
\ put some strings in them for test purposes


\ : PLACE  2DUP >R CHAR+ SWAP MOVE  2R> C! ;

hex
 .heap

  \   4000 heap-buffer: Q       \ make a large buffer

     20 malloc value A$      C" THIS STRING IS A"   A$ $!
     20 malloc value B$      C" THIS STRING IS B"   B$ $!
     40 malloc value C$      c" THIS STRING IS C"   C$ $!
     50 malloc value D$      c" THIS STRING IS D"   D$ $!
     60 malloc value E$      c" THIS STRING IS E"   E$ $!
     70 malloc value F$      c" THIS STRING IS F"   F$ $!
     80 malloc value G$      c" THIS STRING IS G"   G$ $!
     90 malloc value H$      c" THIS STRING IS H"   H$ $!
    100 malloc value I$      c" THIS STRING IS I"   I$ $!
    110 malloc value J$      c" THIS STRING IS J"   J$ $!

    120 malloc value K$      c" Around 2,700 arrived in Slovenia on Saturday and more were expected overnight."   K$ $!
    130 malloc value L$      c" He said Slovenia would accept the migrants as long as Austria and Germany kept their borders open."  L$ $!
    140 malloc value M$      c" Last month it also shut its frontier with Serbia, which was another transit route to Western Europe.a."   M$ $!
    150 malloc value N$      c" Many had spent weeks walking through Greece, Macedonia and Serbia to reach the Croatian border."   N$ $!
    160 malloc value O$      c" Image copyright AFPImage caption Migrants who later reached Spielfeld in Austria waited to be transported to refugee centres."   O$ $!
    170 malloc value P$      c" Slovenia's official STA news agency later some of the migrants had already reached the Austrian border and were being registered at the Spielfeld crossing."   P$ $!
    180 malloc value Q$      c" A spokeswoman for the UN refugee agency (UNHCR) said most of the migrants crossing Slovenia were from Syria, Iraq and Afghanistan."   Q$ $!
    190 malloc value R$      c" They are fleeing from war... they are literally running for their lives, Caroline van Buren told AFP news agency at the Petisovci checkpoint."  R$ $!
    200 malloc value S$      c" Slovenia's army has been placed on standby to help police deal with the influx, Prime Minister Miro Cerar said."   S$ $!
    210 malloc value T$      c" Hungary said it closed its border with Croatia at midnight on Friday because European Union leaders had failed to agree to a plan."   T$ $!

    220 malloc value U$      c" THIS STRING IS U"   U$ $!
    230 malloc value V$      c" THIS STRING IS V"   V$ $!
    240 malloc value W$      c" THIS STRING IS W"   W$ $!
    250 malloc value X$      c" THIS STRING IS X"   X$ $!
    260 malloc value Y$      c" THIS STRING IS Y"   Y$ $!
    270 malloc value Z$      c" THIS STRING IS Z"   Z$ $!

 .heap

[then]

0 [if]
\ create and destroy nodes to look for leaks
  0 value a
  0 value b
  0 value c
  0 value d
  0 value e
  0 value f

: createnodes
   100 malloc to a
   100 malloc to b
   100 malloc to c
   100 malloc to d
   100 cell calloc to e
   100 cell calloc to f ;

: destroy   b FREE ABORT" FREE CAUSED AN ERROR" ;

: fillnodes
        C" This is STRING AAAAAAAAAAAAA"   A $$!
        C" This is STRING BBBBBBBBBBBBB"   B $$!
        c" This is STRING CCCCCCCCCCCCC"   C $$!
        c" This is STRING DDDDDDDDDDDDD. How cool is that?"   D $$!
        c" This is STRING EEEEEEEEEEEEE. It is stored in the HEAP!"   E $$!
        c" This is STRING FFFFFFFFFFFFF. Do not taken any meaning from that. Hungary said it closed its border with Croatia at midnight on Friday."   F $$!  ;

.nodes


.heap

[then]
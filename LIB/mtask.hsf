\ MTASK Multitasker Copyright 1987 Harvard Softworks, All rights reserved.
\ Finally made this work with HSF2000,  June 14, 2015  LOL!
\ Added tons of comments and in the process found an un-needed instruction
\ in <yield>. cool!

\ Had to understand the difference between tick ' in HsForth and ' in ANS Forth
\ to make the assembler code work. Also found Jim had duplicated KKEY? in this
\ file probably for an older version, but it is in the kernel of my version.
\ double checked the code and it's identical

\ June 17 2015:  Added PAUSE as a higher level task switch.
\                PAUSE reads the priotity user-variable of each task and
\                performs a low overhead loop of yield


HEX
[undefined] !CSP   [if]  : !CSP     SP@ CSP ! ;      [then]
[undefined] YIELD  [if]  CODE YIELD  next. END-CODE  [then]


variable multi-tasking                                     \ global flag indicates status ON/OFF
variable #tasks                                            \ counts the number of created tasks

20 VALUE -FKEY?


CREATE USER1-S                                             \ Create the new USER area
                 STACKS DUP@ , ++@ , ++@ , ++@ , ++@       \ "fix P# on reloads" (J. Kalihan comment) copy stacks information to this USER area?
                 0       USER-VAR TASK-LINK                \ create the link to other tasks
                 USER-BASE     TO TASK-LINK                \ init the link to HsForth default TASK
                 true    USER-VAR TASK-FLAG                \ create TASK-FLAG. This flag sets the task Awake or asleep
                 USER1-S USER-VAR TASK-STACK               \ create TASK-STACK and set the stack seg for this new user AREA
                 0       USER-VAR TASK-BUFS                \ TASK-BUFS is an offset for PAD and other memory areas so each task uses a different address
                 \  new B Fox user-vars
                 0       USER-VAR TASK-STAT                \ container for status values. 0 = YIELDING  -1 = RUNNING. Other statuses possible
                 0       USER-VAR TASK-MAIL                \ This user-var receives messages from other tasks.
                 0       USER-VAR TSENDER                  \ PID of the mail sender. 0 = nothing waiting  PID means someone send you a message
                 0       USER-VAR TASK-ID                  \ This is used for reporting error messages. Needs to go in an list with USER block addresses
                 3       USER-VAR PRIORITY                 \ used to control resourses.  1 = highest priority, descending to 65535 OR 0 being lowest.
                 0       USER-VAR TIMEOUT                  \ keep track of how long something has been attempted
                 0       USER-VAR PORT#                    \ used for I/O port base address
                 0       USER-VECTOR XY                    \ routine to control cursor if you use different terminals on tasks.

: MAKE-USER      ( -- <name>)
                 CREATE
                         UP @ HERE                         \ ( old-user-block  here)
                         OVER 2I@ 4+ DUP ALLOT             \ allocate space for this new user-block
                         CMOVE                             \ copy the the date to the new user block
                         #tasks 1+!
                 ;' DOVAR                                  \ run time: act as a variable and return your address


CODE <YIELD> ( -- )                                        \ Cooperative task switcher is vectored to YIELD
        BX                        PUSH.                    \ save the Forth TOS register
        BX     UP +[]             MOV.                     \ move user pointer into BX. We will access the USER variables as [uservar+BX]
        AX  ' TASK-BUFS >BODY @  +[BX] MOV.                \ get the task-bufs address into AX
        ENDL +[] AX               SUB.                     \ adjust the end of Lists memory pointer for this task

                                                           \ this loop is the actual task switcher, looking for the next Awake task
@@ L1.  BX  ' TASK-LINK >body @ +[BX] MOV.                 \ read the task-LINK field of the next TASK into BX
        ' TASK-FLAG >body @ +[BX] TRUE IW TEST.            \ if task-flag of this new task is true then the task is AWAKE
        JZ L1.                                             \ if false jump back to L1, and try the next task

        AX  ' TASK-BUFS >body @ +[BX] MOV.                 \ we found an awake task... move the task-buf offset into AX
        ENDL +[]  AX            ADD.                       \ PAD for task = ENDL+AX

\ change USER                                              \ BX contains the address of the current task user-area
        UP +[]    BX            MOV.                       \ store BX ( the new task's user-area) in UP variable
        BX  ' TASK-STACK >body @ +[BX] MOV.                \ move the current TASK-STACK variable to BX

\ change Stack segment...
        SI                      PUSH.                      \ save HSF's critical registers on this stack
        BP                      PUSH.
        ES                      PUSH.
        SS: 0000 +[]   SP       MOV.                       \ store the stack pointer for current task in it's own Stack segment

\ this is a big overhead to maintian variables in the Forth space
        DI         STACKS   iw  MOV.                       \ get the STACKS data structure address into DI
        AX DS                   MOV.                       \ move data seg to AX
        ES AX                   MOV.                       \ mov AX to ES.   ie now ES=DS
        DX [BX]                 MOV.
        SI  BX                  XCHG.                      \ ds:si is the source [ task-block] ,  es:di [ STACKS data structure] is the destination
                                MOVSW.                     \ Next 4 instructions update the 4 words in the STACKS data structure
                                MOVSW.
                                MOVSW.
                                MOVSW.
        SI BX                   MOV.
        ES DX                   MOV.
        ES: AX    0000 +[]      MOV.                       \ get the stack pointer stored at address 0000 into AX
                                CLI.                       \ disable interrupts
        SS DX                   MOV.                       \ change the Stack Segment
        SP AX                   XCHG.                      \ return the task's stack point to where it was last time.
                                STI.                       \ safe to enable interrupts again

\ restore Forth and get out...
        ES                      POP.                       \ get this new task's ES, BP, SI and TOS registers restored
        BP                      POP.
        SI                      POP.
        BX                      POP.
        NEXT.
END-CODE

: MAKE-STACK     ( size MAKE-STACK name )
                 -2 AND 1+  SEGMENT
                 HERE 2- 4- DUP 4- 2@ 4- tuck 4-  2-   ( adr.end  size-4  p#  size-A )
                 2dup 4+                  0         -ROT !L
                 2dup CELL+ [ PFA-OF QUIT ] LITERAL -ROT !L   \ default action?
                 2dup                     2         -ROT !L    ( BP )
                 2- 2dup                  ES@       -ROT !L
                 SWAP 0 !L
                 DUP ROT 2! ;

: MYSELF         ( -- Tadr )            UP @ ;
: LOCAL          (  task addr -- addr') myself  -  + ;
: @LINK          (  -- adr )            TASK-LINK  @ ;
: !LINK          (  adr -- )            TASK-LINK  ! ;

: TASK:          (  stack-size -- )                        \ ie, 400 TASK: DO-SOMETHING
                 align
                 HERE CELL+  >IN @  ROT  MAKE-STACK  >IN !
                 HERE CELL+              MAKE-USER         \  user-2(stack)  user-2(uvar)
                 TUCK TASK-STACK LOCAL !                   \  user-2(uvar)
                 @link  OVER  !link                        \  user-2(uvar)  task-link
                 OVER  TASK-LINK  LOCAL !
          \       OVER  TASK-ID  #tasks @ rot LOCAL !      \  task-id = next task number
                 TASK-FLAG LOCAL OFF ;

: SET-TASK       (  ip task -- )
                 TASK-STACK LOCAL @ 2@ SWAP ES! 4-         \ Top of Stack  ( ip stackpos )
                 4-    TUCK  !E                            \ Initial IP    (    stackpos )
                 2- 2   OVER !E
                 2- 0000 !E ;                              \ Initial RP    (    stackpos )


\ MULTI-TASKER programmer commands
: RESET-TASK     ( PID -- )  DUP 2I@ 4+ BOUNDS SET-TASK ;
: INIT-MULTI     ( -- )       STACKS @ USER1-S ! ;
: SINGLE         ( -- )       CA' NEXT     DEFINES YIELD    multi-tasking off  timercal ; \ Limit to main task.
: MULTI          (  -- )      CA' <YIELD>  DEFINES YIELD    multi-tasking on   timercal ; \ Activate multitask.
: WAKE           ( PID -- )  TASK-FLAG LOCAL ON     ;                            \ activate the task
: SLEEP          ( PID -- )  TASK-FLAG LOCAL OFF    ;                            \ Suspend task.
: RESTART        ( PID -- )  DUP RESET-TASK  WAKE   ;                            \ new command added by BF. Safer than RESET-TASK
: <JOB>>         ( PID -- )  R> OVER SET-TASK WAKE  ;
: <;JOB>         ( -- )       myself SLEEP  YIELD ;
: JOB>                        ?COMP COMPILE <JOB>>               ; IMMEDIATE
: ;JOB                        ?COMP COMPILE <;JOB> [COMPILE] ;   ; IMMEDIATE

: Pulse          ( -- uS)     tick  yield tock  ;          \ measure the load on the system


\ variable PID-flag

: find-pid      ( task -- ? )                                   \ find process ID (PID)
                0 >R                                                \ create a local variable on Rstack
                myself
                BEGIN
                   task-link local @                                \ get the link to the next job
                   dup myself <>                                    \ am I back to myself?
                while
                   2dup =
                   if R> 1- >R                                      \ decrement our local var to make it -1 (true)
                   then
                repeat
                2DROP  R>  ;

: ?pid ( PID -- PID | abort) dup find-PID 0= abort" Invalid PID" ;          \ error test for TASK commands.
                                                                            \ using a bad PID will crash the system so this prevents it

\ NICE is used in UNIX to adjust priority
: NICE          ( value task -- ) ?PID PRIORITY LOCAL ! ;                   \ set the priority of the given task.
: NICE?         ( task -- n )     ?PID priority local @ ;                   \ get the priority of a TASK


\ resource allocation
: DREAMS       ( n --)                                                     \ ALWAYS does at least 1 YIELD
                begin 
                   1- DUP                                                  \ if n= zero it does 65536 yields !! be careful
                while 
                   yield
                repeat
                DROP ;

\ Addition:   Pause is more sophisticated than yield in that it uses the PRIORITY user-var
\             AND... it records the fact that it is waiting.
\             The status is recorded in the user variable  TASK-STAT

: PAUSE          ( -- )
                 task-stat off                             \ false means it's PAUSing
                 PRIORITY @ DREAMS                         \ each task will PAUSE based on it's priority level. bigger priority = more YIELDS
                 task-stat on ;                            \ true means it's running


80 CELLS Value STACK-SIZE                                  \ 63 cells P-stack and 63 CELLS for R-stack should be enough for most Forth BG processes

: job:    ( -- <NAME> )
                 STACK-SIZE  TASK: HERE @LINK              \ get addresses: def-list , new task
                 SET-TASK  !CSP  ]  ;


\ Simple mailbox implementation for Fox Multi-tasker. (MaxForth) 04JAN94)
\ base on article in Forth Dimensions Vol 7 #4 by R. W. Dobbins. Columbia ML.
\ It allows a transputer like com link between FORTH tasks
\ Concept: "SENDer" waits until the mailbox is cleared by "RECIEVER" before 
\ sending the next message.
\ Message is 1 CELL.  But complex sender/receiver pairs can be created with 
\ this simple pipe.

\ *** LIMITED TO NON-ZERO VALUES.  Need to add support for TSENDER variable

\ see demo\taskmail.hsf

: SEND-MAIL      ( msg rcvr-PID --)
                 TASK-MAIL LOCAL   \ ( msg addr ) compute rcvr mailbox address
                 BEGIN
                    PAUSE
                    DUP@           \ ( msg addr n )  n = contents of mailbox
                 0= UNTIL          \ ( msg addr ) loop until mailbox is empty
                 ! ;               \ store the msg in addr

: READ-MAIL     ( PID -- msg )     \ read mail from any task
                 TASK-MAIL LOCAL   \ ( -- addr )
                 BEGIN
                   PAUSE
                   DUP@            \ dup the addr and fetch contents
                 ?DUP UNTIL        \ loop until content is not zero
                 0 ROT ! ;         \ put zero in the mail box, msg on stack


: GET-MAIL      ( -- n )  myself read-mail ;


\ commands that tasks can do to their own mailbox
: mail?          ( -- ? )     task-mail @ 0 <> ;                      \ check my own mailbox
: mail@          ( -- n|?)    mail? if  GET-MAIL else  false then ;   \ safely read my mail. ie don't wait forever if there is nothing there.
: junkmail       ( -- )       task-mail OFF ;                         \ clear my mailbox, don't ask permission

\ multi-tasker STATUS variable could be used to convey more meanings with these values

1 CONSTANT wait-to-send
2 CONSTANT wait-for-mail


\ Console I/O made multi-tasking friendly

: MWEMIT         ( char -- )
                pause ROW,COL CURSOR! WEMIT ;

: MKKEY          ( -- char )
                 -FKEY?
                 IF
                   BEGIN
                     ROW,COL CURSOR!
                     pause
                     KKEY?
                   UNTIL
                 THEN
                 KKEY DUP TO -FKEY? ;


\ patching the KBRD and CRT commands to use the multi-tasking versions of key and emit
\ Yukky but this is how Jim did it originally (why?)
                 ' MKKEY  ' KBRD 4 I!
                 ' MWEMIT ' CRT 1E I!


\ execute them now to set console I/O to Multi-tasking versions
                 KBRD CRT

DECIMAL
\ ===================================================================

\ Demo code
0 [IF]

init-multi
single

variable x

background: task1                                                    \ increment x at priority speed
      begin
          PAUSE
          x 1+!
      again
;JOB

variable Y

BACKGROUND: task2                                                    \ increment y on a timer (2 SECONDS)
      begin
           2000 ms                                                   \ yield is built into MS word
           Y 1+!
      again
;JOB

\ run these tests with:
\ MULTI
\ TASK1 WAKE
\ TASK2 WAKE
\ 5000 TASK1 NICE  (reduce priority, ie speed of loop)
\ X ?  (see X increment)
\ y ?  (see Y incement at 2 second intervals)

[THEN]



0 [if]

\ *** Multi-user support.  Multiple terminals can run under Mtask.

\ make a 1K segment for the TIB's
HEX
400 SEGMENT TIBS

TIBS 2I@ 2- TIBS 4I!    TIBS @ 0 TIBS 4I@ 0 FILLL                                         \ clear the TIB segment


55 value TIBSIZE

\ array of "TIBs"
: ]TIB  ( task# -- adr ) TIBSIZE 8+ * 4+ ;

\ get at another tasks pad for data transfer, message passing etc
: ]PAD  ( task# -- adr ) PADSPLIT * PAD + ;

\ new definition for QUIT
AT: MQUIT  ( -- )                       \ main routine of a TERMINAL task
        BLK off
        4 SOURCE? !
        [COMPILE] [
        TIBS @  TIBSEG !
        TASK# @ ]TIB  TIB  !
        SSP 0!                          \ clear B. Fox string stack pointer
        BEGIN
             CR  RP!
             QUERY  INTERPRET  PROMPT
             YIELD
        AGAIN ;

\ Now re-define the old version of QUIT with MQUIT
     CA' MQUIT DEFINES QUIT

[then]






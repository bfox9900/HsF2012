\ FALLOCAT.HSF
\ Simple ANS Forth memory allocation in FAR segment for HSForth
\ 2012 BJF Oct 18 2015

\ I have taken the dead simple approach to make the heap work like
\ Forth dictioary space. It is effectively fixed allocation in a linked list.
\ If you try to FREE an item that is not the last node it will blow
\ away the earlier nodes as well. Just like FORGET
\ If you RESIZE an item that is not the last node you get an ERROR

\ The heap is 64K and is kept in separate segment called HEAP
\ and memory accesses to the HEAP use the @E !E words for speed.
\ We have made is simpler by creating the word >HEAP  which sets the
\ ES register to the HEAP segment.
\ You can also use any of the FAR operators (@L !L $@L etc.)

\ =========================================================================
\ change History
\  Oct 18 2015 ported allocate.hsf to FAR memory model, max heap still limited to 64k
\               changed malloc to FARmalloc
\  Oct 20 2015 added ability to select more than 1 HEAP segment
\              added FARcalloc that initializes a HEAP node to zero when allocated
\  Aug 19 2016 Changed TOM to TOH (top of Heap)

[undefined] $!L   [IF] INCLUDE FARSTRNG.HSF  [THEN]

\ =========================================================================
\ Hsforth SEGMENT descriptor explanation:
\ Hsforth word "SEGMENT creates new memory segments that are named
\ and it allocates the memory in DOS.
\ The name returns the address of a small data structure
\ shown below in Psuedo code Forth

\ CREATE MYSEGMENT     cell:seg-paragraph ,
\                      cell:max-seg-size ,
\                      cell:mem-used ,
\                      cell:lastnode ,                \ un-assigned by hsforth so we used it in this code
\                      cell:end-of-mem ,


\ some named segment descriptors a la HsForth
 -1 SEGMENT HEAPSEG
\ 32K SEGMENT HEAP2                                   \ select a different heap segment with:  HEAP2 TO HEAP

       0 value HEAP                                    \ heap contains the address of the current heap segment desciptor

: AP        ( -- addr)  HEAP 4+  ;                    \ allocation pointer is in the HEAP segment data structure
: LASTNODE  ( -- addr)  HEAP 6+ ;                     \ field in the seg descriptor. It keeps track of the last node created

: HEAP@     ( -- para)  HEAP @ DUP 0= ABORT" No HEAP segment!"  ;

: >HEAP      ( -- )     HEAP@ ES! ;                   \ stores seg paragraph in ES register.
                                                      \ WITHIN A DEFINITION ONLY, hsFORTH reverts ES: back to vocabulary in immediate mode

\ usage:    >HEAP VAR1 @E  VAR2 !E                    (transfer from one var to another)


\ Node data structure description
\ Each node in the heap is just a LINK backwards to the previous link,
\ followed by 1 cell that contains the size of the node. The root node = 0,0,0 (link,size,data)

\  $0000                                                                             Node 1                 ... $FFFF
\    --------------------------------------------------------- --------------------------------------------------
\    |  root link = 0  |  root size=0   |  root data = 0 |     Link     |   Size       |   DATA bytes....
\    ------------------------------------------------------------------------------------------------------------
\          ^                                                        |                     ^
\          |                                                        |                     |
\          |                                                        |                  node Ptr points to data
\          |                                                        |
\          ^------<----------------------------<------------------- <
\      *pointS to this                                           *this node


HEX
: TOH   ( -- u ) HEAP  2I@ ;                                    \ top of HEAP segment kept in the descriptor

2 CELLS CONSTANT HHEAD_SIZE                                     \ heap header size


\ 0800 VALUE GAP                                                \ safety gap between dictionary and allocated memory

: where        ( -- addr ) AP @ ;                               \ This is WHERE we know there is free memory :-)

: HALLOT      ( n -- )  AP +! ;                                 \ like allot but in the HEAP segment

: heap,       ( n -- )  >HEAP where !E   CELL HALLOT ;          \ like Forth "," but in the heap space

: hlink       ( addr -- )  LASTNODE @ HEAP, HHEAD_SIZE + LASTNODE ! ;

: INIT-HEAP \ build a root node with the words we created
              HEAP 0= ABORT" HEAP segment unassigned"
               0 AP !
               0 HEAP,                                          \ create empty memory for root node
               0 HEAP,                                          \ create null link root node
               0 HEAP,                                          \ create null size root node
              WHERE lastnode ! ;                                \ record this address as the last node

\ ERROR constants
69 CONSTANT ALLOCATE_ERR
79 CONSTANT HEAP_OVERFLOW
89 CONSTANT FREE_ERROR
99 CONSTANT RESIZE_ERROR

: U>D    ( u -- d ) 0  ;                                 \ convert u, an unsigned int, to double int

: toobig?    ( addr -- ? )                               \ true if too big. We need 32bit math to do it reliably
              U>D  where u>d d+  TOH u>d D> ;            \ check if we trying to allocate past TOP of the segment

\ 14.6.1.0707 ALLOCATE ( u -- a-addr ior )
\
\ NOTE: a-addr is the actual address of memory you use to put things in.
\       To get the link to the previous item use  "a-ddr >PREV"

: FALLOCATE   ( u -- a-addr ior )                        \ non-standard name for segmented mem. model
             ALIGNED                                     \ aligned to even cell addresses
             DUP  toobig?
             if
                  heap_overflow
             ELSE
                   where hlink                           \ link back to the old NODE from this new place, update lastnode
             ( u ) dup HEAP,                             \ record the size in the node
                   hallot                                \ allot the space in the heap
                   LASTNODE @ 0                          \ return the HEAP pointer and 0 flag
             THEN ;


: >SIZE    ( node -- addr)  CELL-   ;                    \ given a node addr, return the size addr
: >SIZE@   ( node --  u )  >HEAP >size @E ;              \ given a node addr, return allocated size

: >PREV    ( node -- addr') [ 2 CELLS ] literal - ;      \ given a node addr, return the link addr
: >PREV@   ( node -- node') >HEAP >PREV @E ;             \ given a node addr, return the addr of the previous node

: FINDNODE ( node -- ? )                                 \ test for a valid node
           DUP LASTNODE @ =                              \ TEST IS IT'S THE LASTNODE
           IF
             DROP
             TRUE
           ELSE                                          \ ELSE SEARCH THE REST...
               0 >R                                      \ PUT A FLAG ON RSTACK
               LASTNODE @
               BEGIN
                     >PREV@ DUP
               WHILE
                     2DUP =
                     IF
                       R> 1- >R
                     THEN
               REPEAT
              2DROP
              R>
           THEN ;


: ?node  ( addr -- addr)                                 \ ABORT on attempt to access bad HEAP node or pass through
         DUP FINDNODE 0=
         IF
           cr ." Addr=" 5 u.R
           true ABORT" Invalid HEAP node"

         then ;

\ 14.6.1.1605 FREE ( a-addr -- ior )
\
: FFREE ( addr -- ior)
        DUP FINDNODE                                  \ check if addr is a valid node
        IF  >prev@
            dup dup >size@ + AP !                     \ move the allocation pointer to node+size position
            LASTNODE !                                \ make it the last node
            false                                     \ return 0
        ELSE
            FREE_ERROR
        THEN ;


\ 14.6.1.2145 RESIZE ( a-addr1 u -- a-addr2 ior )
\

: FRESIZE ( addr u -- addr' ior)
          cell max                                    \ clip the min size to 1 cell and no negative numbers
          over LASTNODE @ =                           \ NON ANS: you can only re-size the last node.
          OVER FINDNODE  or                           \ also test if it's a good node address
          if  dup toobig?
             if
                  DROP heap_overflow                  \ not enough space
             else
                  2dup swap >HEAP >SIZE !E            \ update the size value in the node
                  over + AP !                         \ ... and move the pointer
                  false                               \ return 0 , means All OK
             then
          else
                resize_error                          \ attempted to resize earlier node
          then ;

: HEAP-SIZE ( -- u )   TOH where - ;                  \ returns memory available in the heap


\ ===================================================================
\ BF extentions to Forth 2012 ALLOCATE ETC..

\ FARMALLOC
\ where have I seen this before?  Allocate memory, but abort if it fails.
: farmalloc   ( bytes -- addr )
              Fallocate  abort" FARmalloc failed" ;

\ bugs...
\ : farcalloc   ( #elements size -- addr )            \ allocate memory and clear to zero.
\              *  allocate abort" Calloc failed"
\              dup dup  >size@ heap@ SWAP 0 FILLL ;


: FARbuffer: ( n -- <text>)                           \ like BUFFER: but in a SEGMENT
           CREATE  farmalloc ,
                   heap@ ,              \ record the heap at compile time (it could change at run time)
           DOES> DUP CELL+ @ SWAP @  ;  ( -- seg addr) \ returns 32bit pointer
           


\ ==================================================================
\ TOOLS for debugging show the addresses and sizes

: .Heap    cr ." Heap free= " HEAP-SIZE u.  ;

\ count nodes backwards
:  #NODES  ( -- n)
           0 >R
           LASTNODE @
           BEGIN
                >PREV@ DUP
           while
                  R> 1+ >R
           REPEAT
           R> ;



: .node   ( node -- )
          heap@ 4 u.r [char] : emit  dup 4 u.r  TAB  dup  >size@ 5 U.r  TAB  >prev@ 6 u.r ;

: .nodes
           CR ."  Seg:Node       Bytes   Link"
           cr
           lastnode @
           BEGIN
               cr dup .node
               >PREV@
               PAUSESCREEN
           dup 0= until
           2drop
           CR ." Total nodes = " #nodes .  TAB
           .Heap ;


: ndump
           CR ."  Node    Bytes   Link"
           cr
           lastnode @
           BEGIN
               cr dup heap@ OVER DUP >size@ dumpl
               >PREV@
               pausescreen
           dup 0= until
           2drop
           CR ." Total nodes = " #nodes .  TAB  .Heap ;



: H!   ( n -- )     >HEAP !E ;                      \ heap store n in HEAP address
: H@   ( adr -- n ) >HEAP @E ;                      \ heap fetch n from HEAP adr
: HC@  ( adr -- c ) >heap c@E ;
: HC!  ( c adr -- ) >heap c!E ;
: $H!  ( c-addr addr -- ) heap@ SWAP $!L ;

: WRITE$   ( c-addr -- )   cr heap@ swap $.L ;

\ INTERESTING!  smart string store.  Aborts if node is not allocated
: $$!      ( c-addr addr -- ) heap@ SWAP ?node  $!L ;


HEAPSEG TO HEAP                                       \ do the inits here for testing.
INIT-HEAP
\                 *** FALLOCAT ENDS  ***


0 [if]
\ =========================================================================
\ TEST CODE

\ TEST CODE
\ test malloc and create some named pointers to hold our allocated memory,
\ put some strings in them for test purposes

hex
 .heap

     20 FARmalloc value A$      C" THIS STRING IS A"   A$ $H!
     20 FARmalloc value B$      C" THIS STRING IS B"   B$ $H!
     40 FARmalloc value C$      c" THIS STRING IS C"   C$ $H!
     50 FARmalloc value D$      c" THIS STRING IS D"   D$ $H!
     60 FARmalloc value E$      c" THIS STRING IS E"   E$ $H!
     70 FARmalloc value F$      c" THIS STRING IS F"   F$ $H!
     80 FARmalloc value G$      c" THIS STRING IS G"   G$ $H!
     90 FARmalloc value H$      c" THIS STRING IS H"   H$ $H!
    100 FARmalloc value I$      c" THIS STRING IS I"   I$ $H!
    110 FARmalloc value J$      c" THIS STRING IS J"   J$ $H!

    120 FARmalloc value K$      c" Around 2,700 arrived in Slovenia on Saturday and more were expected overnight."   K$ $H!
    130 FARmalloc value L$      c" He said Slovenia would accept the migrants as long as Austria and Germany kept their borders open."  L$ $H!
    140 FARmalloc value M$      c" Last month it also shut its frontier with Serbia, which was another transit route to Western Europe.a."   M$ $H!
    150 FARmalloc value N$      c" Many had spent weeks walking through Greece, Macedonia and Serbia to reach the Croatian border."   N$ $H!
    160 FARmalloc value O$      c" Image copyright AFPImage caption Migrants who later reached Spielfeld in Austria waited to be transported to refugee centres."   O$ $H!
    170 FARmalloc value P$      c" Slovenia's official STA news agency later some of the migrants had already reached the Austrian border and were being registered at the Spielfeld crossing."  P$ $H!
    180 FARmalloc value Q$      c" A spokeswoman for the UN refugee agency (UNHCR) said most of the migrants crossing Slovenia were from Syria, Iraq and Afghanistan."   Q$ $H!
    190 FARmalloc value R$      c" They are fleeing from war... they are literally running for their lives, Caroline van Buren told AFP news agency at the Petisovci checkpoint."  R$ $H!
    200 FARmalloc value S$      c" Slovenia's army has been placed on standby to help police deal with the influx, Prime Minister Miro Cerar said."   S$ $H!
210 FARmalloc value T$  c" Hungary said it closed its border with Croatia at midnight on Friday because European Union leaders had failed to agree a plan to stem the flow of asylum seekers." T$ $H!

    220 FARmalloc value U$      c" THIS STRING IS U"   U$ $H!
    230 FARmalloc value V$      c" THIS STRING IS V"   V$ $H!
    240 FARmalloc value W$      c" THIS STRING IS W"   W$ $H!
    250 FARmalloc value X$      c" THIS STRING IS X"   X$ $H!
    260 FARmalloc value Y$      c" THIS STRING IS Y"   Y$ $H!
    270 FARmalloc value Z$      c" THIS STRING IS Z"   Z$ $H!

[then]

0 [if]
\ create and arbitrary number of nodes for test purposes

  0 value a
  0 value b
  0 value c
  0 value d
  0 value e
  0 value f

: createnodes                         \ dynamic allocation
             100 FARmalloc to a
             100 FARmalloc to b
             100 FARmalloc to c
             100 FARmalloc to d
              75 FARmalloc to e
            1000 FARmalloc to f
             cr #nodes . ." created"
             ;

: destroy   A FREE ABORT" FREE caused an error" ;

: fillnodes
        C" This is STRING AAAAAAAAAAAAA"   A $$!
        C" This is STRING BBBBBBBBBBBBB"   B $$!
        c" This is STRING CCCCCCCCCCCCC"   C $$!
        c" This is STRING DDDDDDDDDDDDD. How cool is that?"   D $$!
        c" This is STRING EEEEEEEEEEEEE. It is stored in the HEAP!"   E $$!
        c" This is STRING FFFFFFFFFFFFF. Do not taken any meaning from that. Hungary said it closed its border with Croatia at midnight on Friday."   F $$!  ;

.nodes

[then]



0 [if]

: far-array:  ( heap-addr -- )
              create       ,         \ compile the HEAP node address given by FARmalloc

              does> ( n -- addr)
                   @  swap cells + ;


3000 cells farmalloc far-array: ]Q   \ define an array in the HEAP

: fillit                             \ how to access it
        >heap
        0 ]Q  >size@ 2/ 0               \ we can read the size with the base address >size@
        do
            i  i ]Q !E
        loop ;

: seeit
       >heap
       0 ]Q >size@ 2/ 0
       do
          i ]q @E .
       loop ;
[then]







